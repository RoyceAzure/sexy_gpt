syntax = "proto3";

import "user.proto";
import "auth.proto";
package pb;
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "vertify_email.proto";

option go_package = "github.com/RoyceAzure/sexy_gpt/broker_service/shared/pb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "sexy gpt API";
      version: "0.1";
      contact: {
        name: "sexy gpt project";
        url: "https://github.com/RoyceAzure/sexy_gpt";
        email: "roycewnag@gmail.com";
      };
    };
    security_definitions: {
      security: {
        key: "Bearer",
        value: {
          type: TYPE_API_KEY
          in: IN_HEADER
          name: "Authorization"
          description: "Authentication token, prefixed by Bearer: Bearer <token>"
        }
      }
    }
    security: [{
      security_requirement: {
        key: "Bearer",
        value: {}
      }
    }]
};
    
service AccountService{
    rpc CreateUser (CreateUserRequest) returns (UserDTOResponse){
        option (google.api.http) = {
            post: "/v1/user"
            body: "*"
            };
            option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
              description: "不需token，userName必填，email必填，pas必填且長度>=6，包含大小寫字母跟數字，需要接收email認證";
              summary: "Create new user";
            };
    }
    rpc GetUser (GetUserRequest) returns (UserDTOResponse){
      option (google.api.http) = {
          get: "/v1/user"
          };
          option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "需要token，uuid必填,若沒有填，則使用Token內的uuid查詢(查詢自己)，只有內部使用者可以查詢其他使用者資料";
            summary: "Get user";
          };
  }

  rpc GetUsers (GetUsersRequest) returns (UserDTOsResponse){
    option (google.api.http) = {
        get: "/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "需token，參數都是非必填，只有內部使用者可以使用，查詢所有user資料";
          summary: "Get all users";
        };
}

  rpc GetUserByEmail (GetUserByEmailRequest) returns (UserDTOResponse){
    option (google.api.http) = {
        get: "/v1/user/email"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "需要token，email非必填，只有內部使用者會根據email查詢，一般使用者使用token內的email資料查詢";
          summary: "Get user by email";
        };
}

    rpc UpdateUser (UpdateUserRequest) returns (UserDTOResponse){
      option (google.api.http) = {
          patch: "/v1/user"
          body: "*"
          };
          option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "需要token，userId,email為必填，修改使用者資料, 目前只能修改userName，內部使用者目前可以修改其他人資料";
            summary: "Update new user";
          };
  }

  rpc UpdateUserPas (UpdateUserPasRequest) returns (UserDTOResponse){
    option (google.api.http) = {
        patch: "/v1/user/password"
        body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "需要token，userId, pas必填, 修改使用者密碼，修改完後要再call logout，讓使用者重新登入";
          summary: "Update user password";

        };
}

  rpc Login (LoginRequset) returns (AuthDTOResponse){
    option (google.api.http) = {
        post: "/v1/login"
        body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to login a user";
          summary: "Login a user";
        };
}

rpc Logout (LogoutRequset) returns (AuthDTOResponse){
  option (google.api.http) = {
      get: "/v1/logout"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "需要token，Use this API to logout user";
        summary: "Logout user";
      };
}

rpc RefreshToken (RefreshTokenRequset) returns (AuthDTOResponse){
  option (google.api.http) = {
      post: "/v1/refresh"
      body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "不需要token，Use this API to refresh token";
        summary: "Refresh token";
      };
}
rpc SendVertifyEmai (SendVertifyEmailRequset) returns (VertifyEmailResponse){
  option (google.api.http) = {
      post: "/v1/vertifyEmail/send"
      body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "不需要token，記送認證信，email不存在一樣返回成功";
        summary: "send verify email";
      };
}

rpc VertifyEmail (VertifyEmailRequset) returns (VertifyEmailResponse){
  option (google.api.http) = {
      get: "/v1/vertifyEmail"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "不需要token，Use this API to vertified email";
        summary: "vertified email";
      };
}

rpc SSOGoogleLogin (GoogleIDTokenRequest) returns (AuthDTOResponse){
  option (google.api.http) = {
      post: "/v1/sso/google"
      body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "for google sso login, given token in body";
        summary: "for google sso login";
      };
}

rpc ValidateToken (ValidateTokenRequest) returns (AuthDTOResponse){
  option (google.api.http) = {
      post: "/v1/token/vaildate"
      body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "validate access token";
        summary: "validate access token";
      };
}

}
