// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: service_pawai.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PawAIService_FreeChat_FullMethodName    = "/pb.PawAIService/FreeChat"
	PawAIService_Chat_FullMethodName        = "/pb.PawAIService/Chat"
	PawAIService_InitSession_FullMethodName = "/pb.PawAIService/InitSession"
)

// PawAIServiceClient is the client API for PawAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PawAIServiceClient interface {
	// Sends a greeting
	FreeChat(ctx context.Context, in *FreeChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	InitSession(ctx context.Context, in *InitSessionRequest, opts ...grpc.CallOption) (*InitSessionResponse, error)
}

type pawAIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPawAIServiceClient(cc grpc.ClientConnInterface) PawAIServiceClient {
	return &pawAIServiceClient{cc}
}

func (c *pawAIServiceClient) FreeChat(ctx context.Context, in *FreeChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, PawAIService_FreeChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pawAIServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, PawAIService_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pawAIServiceClient) InitSession(ctx context.Context, in *InitSessionRequest, opts ...grpc.CallOption) (*InitSessionResponse, error) {
	out := new(InitSessionResponse)
	err := c.cc.Invoke(ctx, PawAIService_InitSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PawAIServiceServer is the server API for PawAIService service.
// All implementations must embed UnimplementedPawAIServiceServer
// for forward compatibility
type PawAIServiceServer interface {
	// Sends a greeting
	FreeChat(context.Context, *FreeChatRequest) (*ChatResponse, error)
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	InitSession(context.Context, *InitSessionRequest) (*InitSessionResponse, error)
	mustEmbedUnimplementedPawAIServiceServer()
}

// UnimplementedPawAIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPawAIServiceServer struct {
}

func (UnimplementedPawAIServiceServer) FreeChat(context.Context, *FreeChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeChat not implemented")
}
func (UnimplementedPawAIServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedPawAIServiceServer) InitSession(context.Context, *InitSessionRequest) (*InitSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSession not implemented")
}
func (UnimplementedPawAIServiceServer) mustEmbedUnimplementedPawAIServiceServer() {}

// UnsafePawAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PawAIServiceServer will
// result in compilation errors.
type UnsafePawAIServiceServer interface {
	mustEmbedUnimplementedPawAIServiceServer()
}

func RegisterPawAIServiceServer(s grpc.ServiceRegistrar, srv PawAIServiceServer) {
	s.RegisterService(&PawAIService_ServiceDesc, srv)
}

func _PawAIService_FreeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PawAIServiceServer).FreeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PawAIService_FreeChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PawAIServiceServer).FreeChat(ctx, req.(*FreeChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PawAIService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PawAIServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PawAIService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PawAIServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PawAIService_InitSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PawAIServiceServer).InitSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PawAIService_InitSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PawAIServiceServer).InitSession(ctx, req.(*InitSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PawAIService_ServiceDesc is the grpc.ServiceDesc for PawAIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PawAIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PawAIService",
	HandlerType: (*PawAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FreeChat",
			Handler:    _PawAIService_FreeChat_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _PawAIService_Chat_Handler,
		},
		{
			MethodName: "InitSession",
			Handler:    _PawAIService_InitSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_pawai.proto",
}
