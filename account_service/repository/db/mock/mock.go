// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RoyceAzure/sexy_gpt/account_service/repository/db/sqlc (interfaces: Dao)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	db "github.com/RoyceAzure/sexy_gpt/account_service/repository/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockDao) CreateRole(arg0 context.Context, arg1 db.CreateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockDaoMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockDao)(nil).CreateRole), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockDao) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDaoMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDao)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDao) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDaoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDao)(nil).CreateUser), arg0, arg1)
}

// CreateUserRole mocks base method.
func (m *MockDao) CreateUserRole(arg0 context.Context, arg1 db.CreateUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRole indicates an expected call of CreateUserRole.
func (mr *MockDaoMockRecorder) CreateUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRole", reflect.TypeOf((*MockDao)(nil).CreateUserRole), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockDao) CreateUserTx(arg0 context.Context, arg1 *db.CreateUserTxParms) (db.CreateUserTxResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockDaoMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockDao)(nil).CreateUserTx), arg0, arg1)
}

// CreateVertifyEmail mocks base method.
func (m *MockDao) CreateVertifyEmail(arg0 context.Context, arg1 db.CreateVertifyEmailParams) (db.VertifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVertifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VertifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVertifyEmail indicates an expected call of CreateVertifyEmail.
func (mr *MockDaoMockRecorder) CreateVertifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVertifyEmail", reflect.TypeOf((*MockDao)(nil).CreateVertifyEmail), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockDao) DeleteSession(arg0 context.Context, arg1 pgtype.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockDaoMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockDao)(nil).DeleteSession), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockDao) GetRole(arg0 context.Context, arg1 pgtype.UUID) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockDaoMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockDao)(nil).GetRole), arg0, arg1)
}

// GetRoleByRoleName mocks base method.
func (m *MockDao) GetRoleByRoleName(arg0 context.Context, arg1 string) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByRoleName", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByRoleName indicates an expected call of GetRoleByRoleName.
func (mr *MockDaoMockRecorder) GetRoleByRoleName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByRoleName", reflect.TypeOf((*MockDao)(nil).GetRoleByRoleName), arg0, arg1)
}

// GetRoles mocks base method.
func (m *MockDao) GetRoles(arg0 context.Context, arg1 db.GetRolesParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockDaoMockRecorder) GetRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockDao)(nil).GetRoles), arg0, arg1)
}

// GetSessionByUserId mocks base method.
func (m *MockDao) GetSessionByUserId(arg0 context.Context, arg1 pgtype.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUserId", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUserId indicates an expected call of GetSessionByUserId.
func (mr *MockDaoMockRecorder) GetSessionByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUserId", reflect.TypeOf((*MockDao)(nil).GetSessionByUserId), arg0, arg1)
}

// GetSessions mocks base method.
func (m *MockDao) GetSessions(arg0 context.Context, arg1 db.GetSessionsParams) ([]db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessions indicates an expected call of GetSessions.
func (mr *MockDaoMockRecorder) GetSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessions", reflect.TypeOf((*MockDao)(nil).GetSessions), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockDao) GetUser(arg0 context.Context, arg1 pgtype.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDaoMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDao)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockDao) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDaoMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDao)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserDTO mocks base method.
func (m *MockDao) GetUserDTO(arg0 context.Context, arg1 pgtype.UUID) (db.UserRoleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDTO", arg0, arg1)
	ret0, _ := ret[0].(db.UserRoleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDTO indicates an expected call of GetUserDTO.
func (mr *MockDaoMockRecorder) GetUserDTO(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDTO", reflect.TypeOf((*MockDao)(nil).GetUserDTO), arg0, arg1)
}

// GetUserDTOByEmail mocks base method.
func (m *MockDao) GetUserDTOByEmail(arg0 context.Context, arg1 string) (db.UserRoleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDTOByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.UserRoleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDTOByEmail indicates an expected call of GetUserDTOByEmail.
func (mr *MockDaoMockRecorder) GetUserDTOByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDTOByEmail", reflect.TypeOf((*MockDao)(nil).GetUserDTOByEmail), arg0, arg1)
}

// GetUserRoleByUserId mocks base method.
func (m *MockDao) GetUserRoleByUserId(arg0 context.Context, arg1 pgtype.UUID) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleByUserId indicates an expected call of GetUserRoleByUserId.
func (mr *MockDaoMockRecorder) GetUserRoleByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleByUserId", reflect.TypeOf((*MockDao)(nil).GetUserRoleByUserId), arg0, arg1)
}

// GetUserRoles mocks base method.
func (m *MockDao) GetUserRoles(arg0 context.Context, arg1 db.GetUserRolesParams) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockDaoMockRecorder) GetUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockDao)(nil).GetUserRoles), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockDao) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockDaoMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockDao)(nil).GetUsers), arg0, arg1)
}

// GetUsersDTO mocks base method.
func (m *MockDao) GetUsersDTO(arg0 context.Context, arg1 db.GetUsersDTOParams) ([]db.UserRoleView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersDTO", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRoleView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersDTO indicates an expected call of GetUsersDTO.
func (mr *MockDaoMockRecorder) GetUsersDTO(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersDTO", reflect.TypeOf((*MockDao)(nil).GetUsersDTO), arg0, arg1)
}

// GetVertifyEmailByEmail mocks base method.
func (m *MockDao) GetVertifyEmailByEmail(arg0 context.Context, arg1 string) ([]db.VertifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVertifyEmailByEmail", arg0, arg1)
	ret0, _ := ret[0].([]db.VertifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVertifyEmailByEmail indicates an expected call of GetVertifyEmailByEmail.
func (mr *MockDaoMockRecorder) GetVertifyEmailByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVertifyEmailByEmail", reflect.TypeOf((*MockDao)(nil).GetVertifyEmailByEmail), arg0, arg1)
}

// GetVertifyEmailByUserIdAndCode mocks base method.
func (m *MockDao) GetVertifyEmailByUserIdAndCode(arg0 context.Context, arg1 db.GetVertifyEmailByUserIdAndCodeParams) (db.VertifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVertifyEmailByUserIdAndCode", arg0, arg1)
	ret0, _ := ret[0].(db.VertifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVertifyEmailByUserIdAndCode indicates an expected call of GetVertifyEmailByUserIdAndCode.
func (mr *MockDaoMockRecorder) GetVertifyEmailByUserIdAndCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVertifyEmailByUserIdAndCode", reflect.TypeOf((*MockDao)(nil).GetVertifyEmailByUserIdAndCode), arg0, arg1)
}

// GetVertifyEmails mocks base method.
func (m *MockDao) GetVertifyEmails(arg0 context.Context, arg1 db.GetVertifyEmailsParams) ([]db.VertifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVertifyEmails", arg0, arg1)
	ret0, _ := ret[0].([]db.VertifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVertifyEmails indicates an expected call of GetVertifyEmails.
func (mr *MockDaoMockRecorder) GetVertifyEmails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVertifyEmails", reflect.TypeOf((*MockDao)(nil).GetVertifyEmails), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockDao) UpdateRole(arg0 context.Context, arg1 db.UpdateRoleParams) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockDaoMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockDao)(nil).UpdateRole), arg0, arg1)
}

// UpdateSession mocks base method.
func (m *MockDao) UpdateSession(arg0 context.Context, arg1 db.UpdateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockDaoMockRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockDao)(nil).UpdateSession), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDao) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDaoMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDao)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserRole mocks base method.
func (m *MockDao) UpdateUserRole(arg0 context.Context, arg1 db.UpdateUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockDaoMockRecorder) UpdateUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockDao)(nil).UpdateUserRole), arg0, arg1)
}

// UpdateVerifyEmailTx mocks base method.
func (m *MockDao) UpdateVerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmailTx indicates an expected call of UpdateVerifyEmailTx.
func (mr *MockDaoMockRecorder) UpdateVerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmailTx", reflect.TypeOf((*MockDao)(nil).UpdateVerifyEmailTx), arg0, arg1)
}

// UpdateVertifyEmail mocks base method.
func (m *MockDao) UpdateVertifyEmail(arg0 context.Context, arg1 db.UpdateVertifyEmailParams) (db.VertifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVertifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VertifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVertifyEmail indicates an expected call of UpdateVertifyEmail.
func (mr *MockDaoMockRecorder) UpdateVertifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVertifyEmail", reflect.TypeOf((*MockDao)(nil).UpdateVertifyEmail), arg0, arg1)
}
