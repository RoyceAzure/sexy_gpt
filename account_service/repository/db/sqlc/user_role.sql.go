// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user_role.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO "user_role"(
    user_id,
    role_id,
    cr_user
) VALUES(
    $1,$2,$3
) RETURNING user_id, role_id, cr_date, up_date, cr_user, up_user
`

type CreateUserRoleParams struct {
	UserID pgtype.UUID `json:"user_id"`
	RoleID pgtype.UUID `json:"role_id"`
	CrUser string      `json:"cr_user"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, arg.UserID, arg.RoleID, arg.CrUser)
	var i UserRole
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getUserRoleByUserId = `-- name: GetUserRoleByUserId :many
SELECT user_id, role_id, cr_date, up_date, cr_user, up_user FROM "user_role"
WHERE user_id = $1
`

func (q *Queries) GetUserRoleByUserId(ctx context.Context, userID pgtype.UUID) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoleByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.CrDate,
			&i.UpDate,
			&i.CrUser,
			&i.UpUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT user_id, role_id, cr_date, up_date, cr_user, up_user FROM "user_role"
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type GetUserRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUserRoles(ctx context.Context, arg GetUserRolesParams) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRole{}
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.CrDate,
			&i.UpDate,
			&i.CrUser,
			&i.UpUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE "user_role"
SET 
    role_id = COALESCE($1,role_id),
    up_date = COALESCE($2,up_date),
    up_user = COALESCE($3,up_user)
WHERE user_id = $4
RETURNING user_id, role_id, cr_date, up_date, cr_user, up_user
`

type UpdateUserRoleParams struct {
	RoleID pgtype.UUID        `json:"role_id"`
	UpDate pgtype.Timestamptz `json:"up_date"`
	UpUser pgtype.Text        `json:"up_user"`
	UserID pgtype.UUID        `json:"user_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, updateUserRole,
		arg.RoleID,
		arg.UpDate,
		arg.UpUser,
		arg.UserID,
	)
	var i UserRole
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}
