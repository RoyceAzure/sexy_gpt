// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: vertify_email.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVertifyEmail = `-- name: CreateVertifyEmail :one
INSERT INTO "vertify_email"(
    user_id,
    email,
    secret_code
) VALUES(
    $1,$2,$3
) RETURNING id, user_id, email, secret_code, is_used, cr_date, used_date, expired_at
`

type CreateVertifyEmailParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	Email      string      `json:"email"`
	SecretCode string      `json:"secret_code"`
}

func (q *Queries) CreateVertifyEmail(ctx context.Context, arg CreateVertifyEmailParams) (VertifyEmail, error) {
	row := q.db.QueryRow(ctx, createVertifyEmail, arg.UserID, arg.Email, arg.SecretCode)
	var i VertifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CrDate,
		&i.UsedDate,
		&i.ExpiredAt,
	)
	return i, err
}

const getVertifyEmailByUserIdAndCode = `-- name: GetVertifyEmailByUserIdAndCode :one
SELECT id, user_id, email, secret_code, is_used, cr_date, used_date, expired_at FROM "vertify_email"
WHERE 
user_id = $1
AND secret_code = $2
`

type GetVertifyEmailByUserIdAndCodeParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	SecretCode string      `json:"secret_code"`
}

func (q *Queries) GetVertifyEmailByUserIdAndCode(ctx context.Context, arg GetVertifyEmailByUserIdAndCodeParams) (VertifyEmail, error) {
	row := q.db.QueryRow(ctx, getVertifyEmailByUserIdAndCode, arg.UserID, arg.SecretCode)
	var i VertifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CrDate,
		&i.UsedDate,
		&i.ExpiredAt,
	)
	return i, err
}

const getVertifyEmails = `-- name: GetVertifyEmails :many
SELECT id, user_id, email, secret_code, is_used, cr_date, used_date, expired_at FROM "vertify_email"
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type GetVertifyEmailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetVertifyEmails(ctx context.Context, arg GetVertifyEmailsParams) ([]VertifyEmail, error) {
	rows, err := q.db.Query(ctx, getVertifyEmails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VertifyEmail{}
	for rows.Next() {
		var i VertifyEmail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.SecretCode,
			&i.IsUsed,
			&i.CrDate,
			&i.UsedDate,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVertifyEmail = `-- name: UpdateVertifyEmail :one
UPDATE "vertify_email"
SET 
    is_used = COALESCE($1,is_used),
    used_date = COALESCE($2,used_date)
WHERE id = $3
RETURNING id, user_id, email, secret_code, is_used, cr_date, used_date, expired_at
`

type UpdateVertifyEmailParams struct {
	IsUsed   pgtype.Bool        `json:"is_used"`
	UsedDate pgtype.Timestamptz `json:"used_date"`
	ID       int64              `json:"id"`
}

func (q *Queries) UpdateVertifyEmail(ctx context.Context, arg UpdateVertifyEmailParams) (VertifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVertifyEmail, arg.IsUsed, arg.UsedDate, arg.ID)
	var i VertifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CrDate,
		&i.UsedDate,
		&i.ExpiredAt,
	)
	return i, err
}
