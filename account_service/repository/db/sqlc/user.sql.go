// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user"(
    user_name,
    email,
    hashed_password,
    sso_identifer,
    is_internal,
    cr_user
)  VALUES(
    $1,$2,$3,$4,$5,$6
)  RETURNING user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user
`

type CreateUserParams struct {
	UserName       string      `json:"user_name"`
	Email          string      `json:"email"`
	HashedPassword string      `json:"hashed_password"`
	SsoIdentifer   pgtype.Text `json:"sso_identifer"`
	IsInternal     bool        `json:"is_internal"`
	CrUser         string      `json:"cr_user"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.Email,
		arg.HashedPassword,
		arg.SsoIdentifer,
		arg.IsInternal,
		arg.CrUser,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.IsInternal,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user FROM "user"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.IsInternal,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user FROM "user"
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.IsInternal,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}

const getUserDTO = `-- name: GetUserDTO :one
SELECT user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user, role_id, role_name FROM "user_role_view"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserDTO(ctx context.Context, userID pgtype.UUID) (UserRoleView, error) {
	row := q.db.QueryRow(ctx, getUserDTO, userID)
	var i UserRoleView
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.IsInternal,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
		&i.RoleID,
		&i.RoleName,
	)
	return i, err
}

const getUserDTOByEmail = `-- name: GetUserDTOByEmail :one
SELECT user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user, role_id, role_name FROM "user_role_view"
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserDTOByEmail(ctx context.Context, email string) (UserRoleView, error) {
	row := q.db.QueryRow(ctx, getUserDTOByEmail, email)
	var i UserRoleView
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.IsInternal,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
		&i.RoleID,
		&i.RoleName,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user FROM "user"
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.Email,
			&i.IsEmailVerified,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.SsoIdentifer,
			&i.IsInternal,
			&i.CrDate,
			&i.UpDate,
			&i.CrUser,
			&i.UpUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersDTO = `-- name: GetUsersDTO :many
SELECT user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user, role_id, role_name FROM "user_role_view"
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type GetUsersDTOParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsersDTO(ctx context.Context, arg GetUsersDTOParams) ([]UserRoleView, error) {
	rows, err := q.db.Query(ctx, getUsersDTO, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRoleView{}
	for rows.Next() {
		var i UserRoleView
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.Email,
			&i.IsEmailVerified,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.SsoIdentifer,
			&i.IsInternal,
			&i.CrDate,
			&i.UpDate,
			&i.CrUser,
			&i.UpUser,
			&i.RoleID,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET 
    user_name = COALESCE($1,user_name),
    email = COALESCE($2,email),
    is_email_verified = COALESCE($3,is_email_verified),
    hashed_password = COALESCE($4,hashed_password),
    password_changed_at = COALESCE($5,password_changed_at),
    sso_identifer = COALESCE($6,sso_identifer),
    is_internal = COALESCE($7,is_internal),
    up_date = COALESCE($8,up_date),
    up_user = COALESCE($9,up_user)
WHERE user_id = $10
RETURNING user_id, user_name, email, is_email_verified, hashed_password, password_changed_at, sso_identifer, is_internal, cr_date, up_date, cr_user, up_user
`

type UpdateUserParams struct {
	UserName          pgtype.Text        `json:"user_name"`
	Email             pgtype.Text        `json:"email"`
	IsEmailVerified   pgtype.Bool        `json:"is_email_verified"`
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	SsoIdentifer      pgtype.Text        `json:"sso_identifer"`
	IsInternal        pgtype.Bool        `json:"is_internal"`
	UpDate            pgtype.Timestamptz `json:"up_date"`
	UpUser            pgtype.Text        `json:"up_user"`
	UserID            pgtype.UUID        `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserName,
		arg.Email,
		arg.IsEmailVerified,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.SsoIdentifer,
		arg.IsInternal,
		arg.UpDate,
		arg.UpUser,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.SsoIdentifer,
		&i.IsInternal,
		&i.CrDate,
		&i.UpDate,
		&i.CrUser,
		&i.UpUser,
	)
	return i, err
}
