syntax = "proto3";

import "user.proto";
import "auth.proto";
package pb;
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/RoyceAzure/sexy_gpt/account_service/shared/pb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "sexy gpt API";
      version: "0.1";
      contact: {
        name: "sexy gpt project";
        url: "https://github.com/RoyceAzure/sexy_gpt";
        email: "roycewnag@gmail.com";
      };
    };
    security_definitions: {
      security: {
        key: "Bearer",
        value: {
          type: TYPE_API_KEY
          in: IN_HEADER
          name: "Authorization"
          description: "Authentication token, prefixed by Bearer: Bearer <token>"
        }
      }
    }
    security: [{
      security_requirement: {
        key: "Bearer",
        value: {}
      }
    }]
};
    
service AccountService{
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse){
        option (google.api.http) = {
            post: "/v1/user"
            body: "*"
            };
            option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
              description: "Use this API to create new user";
              summary: "Create new user";
            };
    }
    rpc GetUser (GetUserRequest) returns (GetUserResponse){
      option (google.api.http) = {
          get: "/v1/user"
          };
          option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to Get user by user id";
            summary: "Get  user";
          };
  }

  rpc GetUsers (GetUsersRequest) returns (GetUsersResponse){
    option (google.api.http) = {
        get: "/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to Get all users";
          summary: "Get all users";
        };
}

  rpc GetUserByEmail (GetUserByEmailRequest) returns (GetUserByEmailResponse){
    option (google.api.http) = {
        get: "/v1/user/email"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to Get user by user email";
          summary: "Get  user";
        };
}

    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse){
      option (google.api.http) = {
          patch: "/v1/user"
          body: "*"
          };
          option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Use this API to update new user";
            summary: "Update new user";
          };
  }

  rpc Login (LoginRequset) returns (LoginResponse){
    option (google.api.http) = {
        post: "/v1/login"
        body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "Use this API to login a user";
          summary: "Login a user";
        };
}

rpc Logout (LogoutRequset) returns (LogoutResponse){
  option (google.api.http) = {
      get: "/v1/logout"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to logout user";
        summary: "Logout user";
      };
}

rpc RefreshToken (RefreshTokenRequset) returns (RefreshTokenResponse){
  option (google.api.http) = {
      post: "/v1/refresh"
      body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "Use this API to refresh token";
        summary: "Refresh token";
      };
}

}
