// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session"(
    user_id,
    refresh_token,
    user_agent,
    client_ip,
    expired_at
) VALUES(
    $1,$2,$3,$4,$5
) RETURNING id, user_id, refresh_token, user_agent, client_ip, is_blocked, cr_date, expired_at
`

type CreateSessionParams struct {
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	UserAgent    string             `json:"user_agent"`
	ClientIp     string             `json:"client_ip"`
	ExpiredAt    pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiredAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CrDate,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :one
Delete FROM "session"
WHERE id = $1
RETURNING id, user_id, refresh_token, user_agent, client_ip, is_blocked, cr_date, expired_at
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, deleteSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CrDate,
		&i.ExpiredAt,
	)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT id, user_id, refresh_token, user_agent, client_ip, is_blocked, cr_date, expired_at FROM "session"
WHERE 
user_id = $1 LIMIT 1
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByUserId, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CrDate,
		&i.ExpiredAt,
	)
	return i, err
}

const getSessions = `-- name: GetSessions :many
SELECT id, user_id, refresh_token, user_agent, client_ip, is_blocked, cr_date, expired_at FROM "session"
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type GetSessionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetSessions(ctx context.Context, arg GetSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getSessions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.UserAgent,
			&i.ClientIp,
			&i.IsBlocked,
			&i.CrDate,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE "session"
SET 
    is_blocked = COALESCE($1,is_blocked)
WHERE id = $2
RETURNING id, user_id, refresh_token, user_agent, client_ip, is_blocked, cr_date, expired_at
`

type UpdateSessionParams struct {
	IsBlocked pgtype.Bool `json:"is_blocked"`
	ID        pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession, arg.IsBlocked, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CrDate,
		&i.ExpiredAt,
	)
	return i, err
}
